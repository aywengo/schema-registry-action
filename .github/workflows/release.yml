name: Release

on:
  push:
    tags:
      - 'v*'

jobs:
  # Ensure tests pass before releasing
  validate:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Run basic validation
        run: |
          # Validate action.yml syntax
          if ! command -v yq &> /dev/null; then
            sudo apt-get update && sudo apt-get install -y yq
          fi
          yq eval action.yml > /dev/null
          
          # Validate action.yml contains ksr-cli references
          if ! grep -q "ksr-cli" action.yml; then
            echo "action.yml should reference ksr-cli"
            exit 1
          fi
          
          # Verify action.yml has required operations
          if ! grep -q "operation.*validate\|check-compatibility\|deploy\|export" action.yml; then
            echo "action.yml missing required operations"
            exit 1
          fi
          
          echo "✅ All validations passed"

  # Wait for existing test workflows to complete
  wait-for-tests:
    runs-on: ubuntu-latest
    needs: validate
    steps:
      - uses: actions/checkout@v4
      
      # Wait for basic Test workflow (from test.yml)
      - name: Wait for basic Test workflow
        uses: lewagon/wait-on-check-action@v1.4.0
        with:
          ref: ${{ github.ref }}
          check-name: 'test'  # Fixed: should be 'test' (lowercase)
          repo-token: ${{ secrets.GITHUB_TOKEN }}
          wait-interval: 10
          allowed-conclusions: success,skipped
          
      # Wait for Schema Registry Action Tests workflow matrix jobs
      - name: Wait for unit tests
        uses: lewagon/wait-on-check-action@v1.4.0
        with:
          ref: ${{ github.ref }}
          check-name: 'test (unit)'
          repo-token: ${{ secrets.GITHUB_TOKEN }}
          wait-interval: 10
          allowed-conclusions: success,skipped
          
      - name: Wait for integration tests
        uses: lewagon/wait-on-check-action@v1.4.0
        with:
          ref: ${{ github.ref }}
          check-name: 'test (integration)'
          repo-token: ${{ secrets.GITHUB_TOKEN }}
          wait-interval: 10
          allowed-conclusions: success,skipped
          
      - name: Wait for performance tests
        uses: lewagon/wait-on-check-action@v1.4.0
        with:
          ref: ${{ github.ref }}
          check-name: 'test (performance)'
          repo-token: ${{ secrets.GITHUB_TOKEN }}
          wait-interval: 10
          allowed-conclusions: success,skipped
      
      - name: Verify tag is on main branch
        run: |
          # Check that this tag points to a commit that's on main branch
          # This ensures tests ran when the commit was pushed to main
          git fetch origin main
          
          TAG_COMMIT=$(git rev-parse ${{ github.ref }})
          echo "Tag commit: $TAG_COMMIT"
          
          # Check if tag commit is reachable from main
          if git merge-base --is-ancestor $TAG_COMMIT origin/main; then
            echo "✅ Tag is based on main branch"
          else
            echo "❌ Tag is not based on main branch"
            echo "Please ensure the tag points to a commit that has been tested on main"
            exit 1
          fi

  release:
    needs: [validate, wait-for-tests]
    runs-on: ubuntu-latest
    permissions:
      contents: write
      
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Configure Git
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
      
      - name: Get version info
        id: version
        run: |
          VERSION=${GITHUB_REF#refs/tags/}
          MAJOR_VERSION=$(echo $VERSION | cut -d. -f1)
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "major_version=$MAJOR_VERSION" >> $GITHUB_OUTPUT
          
          # Check if this is a pre-release
          if [[ $VERSION =~ -[a-zA-Z] ]]; then
            echo "prerelease=true" >> $GITHUB_OUTPUT
          else
            echo "prerelease=false" >> $GITHUB_OUTPUT
          fi
      
      - name: Generate release notes
        id: release_notes
        run: |
          # Simple approach - just use the existing CHANGELOG content or generate default
          VERSION_NO_V=${GITHUB_REF#refs/tags/v}
          echo "Looking for version: $VERSION_NO_V"
          
          if [ -f "CHANGELOG.md" ]; then
            echo "Found CHANGELOG.md, using it as reference"
            echo "## Release Notes" > release_notes.md
            echo "" >> release_notes.md
            echo "See [CHANGELOG.md](./CHANGELOG.md) for detailed changes in version $VERSION_NO_V." >> release_notes.md
          else
            echo "No CHANGELOG.md found, generating default release notes"
            echo "## 🚀 Schema Registry Action ${GITHUB_REF#refs/tags/}" > release_notes.md
            echo "" >> release_notes.md
            echo "This release includes improvements and bug fixes." >> release_notes.md
            echo "" >> release_notes.md
            echo "### Usage" >> release_notes.md
            echo '```yaml' >> release_notes.md
            echo "- uses: ${{ github.repository }}@${{ steps.version.outputs.major_version }}" >> release_notes.md
            echo "  with:" >> release_notes.md
            echo "    operation: 'validate'" >> release_notes.md
            echo "    schemas-path: './schemas'" >> release_notes.md
            echo '```' >> release_notes.md
          fi
          
          echo "Generated release notes:"
          cat release_notes.md
          
          # Set multiline output using the recommended method
          {
            echo 'notes<<EOF'
            cat release_notes.md
            echo EOF
          } >> $GITHUB_OUTPUT
      
      - name: Create Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ github.ref }}
          name: Release ${{ steps.version.outputs.version }}
          body: ${{ steps.release_notes.outputs.notes }}
          draft: false
          prerelease: ${{ steps.version.outputs.prerelease }}
          generate_release_notes: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          
      - name: Update major version tag
        if: steps.version.outputs.prerelease == 'false'
        run: |
          MAJOR_VERSION=${{ steps.version.outputs.major_version }}
          echo "Updating major version tag: $MAJOR_VERSION"
          
          # Delete existing tag if it exists
          git tag -d $MAJOR_VERSION 2>/dev/null || true
          git push origin :refs/tags/$MAJOR_VERSION 2>/dev/null || true
          
          # Create new major version tag
          git tag -fa $MAJOR_VERSION -m "Update $MAJOR_VERSION tag to ${{ steps.version.outputs.version }}"
          git push origin $MAJOR_VERSION
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          
      - name: Update marketplace
        if: steps.version.outputs.prerelease == 'false'
        run: |
          echo "🎉 Release ${{ steps.version.outputs.version }} completed!"
          echo "✅ GitHub release created"
          echo "✅ Major version tag (${{ steps.version.outputs.major_version }}) updated"
          echo ""
          echo "The action is now available at:"
          echo "- ${{ github.repository }}@${{ steps.version.outputs.version }}"
          echo "- ${{ github.repository }}@${{ steps.version.outputs.major_version }}"

  # Post-release validation
  post-release-test:
    needs: release
    runs-on: ubuntu-latest
    steps:
      - name: Test released action
        uses: actions/checkout@v4
        
      - name: Create test schema
        run: |
          mkdir -p test-schemas
          echo '{"type": "string"}' > test-schemas/test.avsc
          
      - name: Test action with simple validation
        run: |
          echo "✅ Action release validation - would test the released action here"
         
      - name: Verify action works
        run: |
          echo "✅ Released action validation completed successfully"